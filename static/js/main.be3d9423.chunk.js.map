{"version":3,"sources":["setAuthToken.js","action/index.js","Login.js","App.js","serviceWorker.js","reducers/formReducer.js","reducers/index.js","index.js","store/configureStore.js"],"names":["setAuthToken","token","axios","defaults","headers","common","addNewFormRequest","form","type","addNewFormRequestSuccess","user","addNewFormRequestFailed","error","addNewLoginRequest","addNewLoginRequestSuccess","addNewLoginRequestFailed","setCurrentUser","decoded","Login","onSubmit","e","preventDefault","document","querySelector","data","email","value","password","_this","props","addNewLogin","reset","react_default","a","createElement","this","id","name","placeholder","Component","connect","dispatch","fetch","method","Content-Type","body","JSON","stringify","then","response","ok","json","localStorage","setItem","jwt_decode","App","addNewForm","className","src_Login","Boolean","window","location","hostname","match","initialState","isFetching","register","combineReducers","rootReducer","state","arguments","length","undefined","action","Object","objectSpread","store","middlewares","thunk","createStore","rootReducers","compose","applyMiddleware","apply","devToolsExtension","f","configureStore","ReactDOM","render","es","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be3d9423.chunk.js","sourcesContent":["import axios from 'axios';\n\n// add authorization header to every requests if we logged in\nconst setAuthToken = token =>{\n    if(token){\n        // Apply to every request\n        axios.defaults.headers.common['Authorization'] = token;\n    } else{\n        // Delete auth header. if !token\n        delete axios.defaults.headers.common['Authorization'];\n    }\n}\n\nexport default setAuthToken;","import setAuthToken from '../../src/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nconst apiUrl = 'https://user-jwt.herokuapp.com/api/register';\n\nexport const addNewForm = form => {\n    return dispatch => {\n      dispatch(addNewFormRequest(form));\n      return fetch(apiUrl, { \n        method: 'POST', \n        headers: {\"Content-Type\": \"application/json\"}, \n        body: JSON.stringify(form) })\n            .then(response => {\n          if (response.ok) {\n            response.json().then(data => {\n              dispatch(addNewFormRequestSuccess(data.user));\n            });\n          } else {\n            response.json().then(error => {\n              dispatch(addNewFormRequestFailed(error));\n          });\n        }\n      });\n    };\n  };\n \n\n  export const addNewFormRequest = form => {\n    return {\n      type: 'ADD_NEW_FORM_REQUEST',\n      form,\n    };\n  };\n\n  export const addNewFormRequestSuccess = (form, user) => {\n    return {\n      type: 'ADD_NEW_FORM_REQUEST_SUCCESS',\n      user\n    };\n  };\n  \n  export const addNewFormRequestFailed = error => {\n    return {\n      type: 'ADD_NEW_TODO_REQUEST_FAILED',\n      error,\n    };\n  };\n\n  const apiUrl2 = 'https://user-jwt.herokuapp.com/api/login';\n\n  export const addNewLogin = form => {\n    return dispatch => {\n      dispatch(addNewLoginRequest(form));\n      return fetch(apiUrl2, { \n        method: 'POST', \n        headers: {\"Content-Type\": \"application/json\"}, \n        body: JSON.stringify(form) })\n            .then(response => {\n          if (response.ok) {\n            response.json().then(data => {\n              dispatch(addNewLoginRequestSuccess(data.token));\n                if(data.token){\n                  localStorage.setItem('x-access-token', data.token);\n                  \n                  setAuthToken(data.token);\n\n                  const decoded = jwt_decode(data.token);\n                  dispatch(setCurrentUser(decoded));\n                }\n\n            });\n          } else {\n            response.json().then(error => {\n              dispatch(addNewLoginRequestFailed(error));\n          });\n        }\n      });\n    };\n  };\n \n\n  export const addNewLoginRequest = form => {\n    return {\n      type: 'ADD_NEW_LOGIN_REQUEST',\n      form,\n    };\n  };\n\n  export const addNewLoginRequestSuccess = (form, token) => {\n    return {\n      type: 'ADD_NEW_LOGIN_REQUEST_SUCCESS',\n      token\n    };\n  };\n  \n  export const addNewLoginRequestFailed = error => {\n    return {\n      type: 'ADD_NEW_LOGIN_REQUEST_FAILED',\n      error,\n    };\n  };\n\n  export const setCurrentUser = decoded => {\n    return {\n      type: 'ADD_NEW_DECODED_USER',\n      user: decoded\n    }\n  }","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport {addNewLogin} from '../src/action/index';\n\nclass Login extends Component {\n    onSubmit = e => {\n        e.preventDefault();\n        const form = document.querySelector('#login');\n          const data = {\n            email: form.email.value,\n            password: form.password.value,\n          }\n          this.props.addNewLogin(data);\n          form.reset();\n      }\n    \n  render() {\n    return (\n      <div>\n            <form onSubmit={this.onSubmit} id=\"login\">\n                <input type=\"email\" name=\"email\" placeholder=\"email\" />\n                <br />\n                <input type=\"password\" name=\"password\" placeholder=\"password\" />\n                <br />\n                <button>Login</button>\n            </form>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNewLogin: form => dispatch(addNewLogin(form)),\n    };\n  }\n\nexport default connect(null,mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport Login from './Login.js';\nimport {connect} from 'react-redux';\n\nimport {addNewForm} from '../src/action/index'\n\n\nclass App extends Component {\n\n  onSubmit = e => {\n    e.preventDefault();\n    const form = document.querySelector('form');\n    \n      // const data = new FormData();\n      // data.append('title', form.title.value);\n      // data.append('author', form.author.value);\n      // data.append('description', form.description.value);\n      // data.append('published', form.description.value);\n      const data = {\n        email: form.email.value,\n        password: form.password.value,\n        name: form.name.value\n      }\n      this.props.addNewForm(data);\n    form.reset();\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.onSubmit} id=\"form\">\n          <input type=\"email\" name=\"email\" placeholder=\"email\" />\n          <br />\n          <input type=\"password\" name=\"password\" placeholder=\"password\" />\n          <br />\n          <input type=\"text\" name=\"name\" placeholder=\"name\" />\n          <br />\n  \n          <br />\n          <button>REGISTER</button>\n        </form>\n        <Login />\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addNewForm: form => dispatch(addNewForm(form)),\n  };\n}\n\nexport default connect(null,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n   form: {},\n   isFetching: false,\n   register: false,\n   user: {}\n};\n\nexport const rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case 'ADD_NEW_FORM_REQUEST':\n        return {\n          ...state,\n          isFetching: true,\n          form: action.form\n        };\n        case 'ADD_NEW_FORM_REQUEST_SUCCESS':\n        return {\n          ...state,\n          isFetching: false,\n          register: true,\n          user: action.user\n        };\n        case 'ADD_NEW_TODO_REQUEST_FAILED':\n        return {\n          ...state,\n          isFetching: false,\n        };\n        case 'ADD_NEW_LOGIN_REQUEST':\n        return {\n          ...state,\n          isFetching: true,\n          form: action.form\n        };\n        case 'ADD_NEW_LOGIN_REQUEST_SUCCESS':\n        return {\n          ...state,\n          isFetching: true,\n          form: action.form\n        };\n        case 'ADD_NEW_LOGIN_REQUEST_FAILED':\n        return {\n          ...state,\n          isFetching: true,\n          form: action.form\n        };\n        case 'ADD_NEW_DECODED_USER':\n        return {\n          ...state,\n          user: action.user\n        };\n\n        default:\n        return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport { rootReducer } from './formReducer';\n\nexport default combineReducers({\n  rootReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducers from '../reducers';\n\nexport default function configureStore() {\n  const middlewares = [thunk];\n\n  const store = createStore(\n    rootReducers,\n    compose(\n      applyMiddleware(...middlewares),\n      window.devToolsExtension ? window.devToolsExtension() : f => f // add support for Redux dev tools\n    )\n  );\n\n  return store;\n}\n"],"sourceRoot":""}